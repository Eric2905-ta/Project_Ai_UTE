2023/05/11 06:26:09 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.11 (main, Apr  5 2023, 14:15:10) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 32
    GPU 0: Tesla T4
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.1+cu118
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 32
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/05/11 06:26:10 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[72.39239876, 82.90891754, 73.15835921],
    std=[1, 1, 1],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[72.39239876, 82.90891754, 73.15835921],
        std=[1, 1, 1],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 1024)),
    backbone=dict(
        type='CGNet',
        norm_cfg=dict(type='BN', requires_grad=True),
        in_channels=3,
        num_channels=(32, 64, 128),
        num_blocks=(3, 21),
        dilations=(2, 4),
        reductions=(8, 16)),
    decode_head=dict(
        type='FCNHead',
        in_channels=256,
        in_index=2,
        channels=256,
        num_convs=0,
        concat_input=False,
        dropout_ratio=0,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        loss_decode=dict(
            type='CrossEntropyLoss',
            use_sigmoid=False,
            loss_weight=1.0,
            class_weight=None)),
    train_cfg=dict(sampler=None),
    test_cfg=dict(mode='whole'))
dataset_type = 'BASEDATA_'
data_root = '/content/dataset'
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=4,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='BASEDATA_',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='image/ISIC2018_Task1-2_Training_Input',
            seg_map_path='label/ISIC2018_Task1_Training_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='BASEDATA_',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='image/ISIC2018_Task1-2_Validation_Input',
            seg_map_path='label/ISIC2018_Task1_Validation_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='BASEDATA_',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='image/ISIC2018_Task1-2_Test_Input',
            seg_map_path='label/ISIC2018_Task1_Test_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=['mIoU'],
    format_only=False,
    output_dir='work_dirs/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/cgnet/cgnet_512x1024_60k_cityscapes/cgnet_512x1024_60k_cityscapes_20201101_110254-124ea03b.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='Adam', lr=0.001, eps=1e-08, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='Adam', lr=0.001, eps=1e-08, weight_decay=0.0005))
param_scheduler = [
    dict(type='LinearLR', by_epoch=False, start_factor=0.1, begin=0, end=200),
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=160,
        by_epoch=False)
]
total_iters = 60000
train_cfg = dict(
    type='EpochBasedTrainLoop', max_epochs=5, val_begin=1, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1000, by_epoch=False),
    sampler_seed=dict(type='DistSamplerSeedHook'))
work_dir = './work_dirs/tutorials'
randomness = dict(seed=32)

2023/05/11 06:26:10 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/05/11 06:26:10 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/05/11 06:26:20 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([32, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.0.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.stem.1.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.1.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.stem.2.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.stem.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.stem.2.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.norm_prelu_0.0.weight - torch.Size([35]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_0.0.bias - torch.Size([35]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_0.1.weight - torch.Size([35]): 
ConstantInit: val=0, bias=0 

backbone.level1.0.conv1x1.conv.weight - torch.Size([64, 35, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level1.0.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.0.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level1.0.bottleneck.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.0.weight - torch.Size([8, 64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.2.weight - torch.Size([64, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.0.f_glo.fc.2.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.conv1x1.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.conv1x1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.conv1x1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.conv1x1.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.level1.1.f_loc.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_sur.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level1.1.f_glo.fc.0.weight - torch.Size([8, 64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_glo.fc.2.weight - torch.Size([64, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.1.f_glo.fc.2.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.conv1x1.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.conv1x1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.conv1x1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.conv1x1.activate.weight - torch.Size([32]): 
ConstantInit: val=0, bias=0 

backbone.level1.2.f_loc.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_sur.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level1.2.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level1.2.f_glo.fc.0.weight - torch.Size([8, 64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_glo.fc.2.weight - torch.Size([64, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level1.2.f_glo.fc.2.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.norm_prelu_1.0.weight - torch.Size([131]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_1.0.bias - torch.Size([131]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_1.1.weight - torch.Size([131]): 
ConstantInit: val=0, bias=0 

backbone.level2.0.conv1x1.conv.weight - torch.Size([128, 131, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.conv1x1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.conv1x1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.conv1x1.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.0.f_loc.weight - torch.Size([128, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_sur.weight - torch.Size([128, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.0.activate.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

backbone.level2.0.bottleneck.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.0.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.1.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.1.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.1.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.1.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.2.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.2.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.2.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.2.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.3.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.3.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.3.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.3.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.4.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.4.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.4.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.4.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.5.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.5.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.5.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.5.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.6.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.6.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.6.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.6.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.7.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.7.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.7.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.7.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.8.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.8.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.8.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.8.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.9.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.9.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.9.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.9.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.10.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.10.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.10.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.10.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.11.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.11.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.11.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.11.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.12.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.12.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.12.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.12.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.13.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.13.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.13.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.13.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.14.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.14.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.14.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.14.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.15.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.15.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.15.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.15.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.16.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.16.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.16.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.16.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.17.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.17.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.17.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.17.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.18.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.18.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.18.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.18.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.19.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.19.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.19.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.19.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.conv1x1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.conv1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.conv1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.conv1x1.activate.weight - torch.Size([64]): 
ConstantInit: val=0, bias=0 

backbone.level2.20.f_loc.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_sur.weight - torch.Size([64, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.level2.20.activate.weight - torch.Size([128]): 
ConstantInit: val=0, bias=0 

backbone.level2.20.f_glo.fc.0.weight - torch.Size([8, 128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_glo.fc.0.bias - torch.Size([8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_glo.fc.2.weight - torch.Size([128, 8]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.level2.20.f_glo.fc.2.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.norm_prelu_2.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.norm_prelu_2.1.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

decode_head.conv_seg.weight - torch.Size([2, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/05/11 06:26:21 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmsegmentation/v0.5/cgnet/cgnet_512x1024_60k_cityscapes/cgnet_512x1024_60k_cityscapes_20201101_110254-124ea03b.pth
2023/05/11 06:26:21 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/05/11 06:26:21 - mmengine - INFO - Checkpoints will be saved to /content/mmsegmentation/work_dirs/tutorials.
2023/05/11 06:27:33 - mmengine - INFO - Epoch(train) [1][ 50/649]  lr: 2.7508e-04  eta: 1:16:37  time: 1.5330  data_time: 1.2646  memory: 9752  loss: 0.2020  decode.loss_ce: 0.2020  decode.acc_seg: 87.3007
2023/05/11 06:28:44 - mmengine - INFO - Epoch(train) [1][100/649]  lr: 3.2283e-04  eta: 1:14:54  time: 1.3807  data_time: 1.1071  memory: 7513  loss: 0.0560  decode.loss_ce: 0.0560  decode.acc_seg: 100.0000
2023/05/11 06:29:49 - mmengine - INFO - Epoch(train) [1][150/649]  lr: 1.7735e-04  eta: 1:11:29  time: 1.1041  data_time: 0.8305  memory: 7513  loss: 0.0571  decode.loss_ce: 0.0571  decode.acc_seg: 100.0000
2023/05/11 06:30:58 - mmengine - INFO - Epoch(train) [1][200/649]  lr: 1.2209e-04  eta: 1:10:24  time: 1.4047  data_time: 1.1335  memory: 7513  loss: 0.0334  decode.loss_ce: 0.0334  decode.acc_seg: 99.7617
2023/05/11 06:32:08 - mmengine - INFO - Epoch(train) [1][250/649]  lr: 1.2209e-04  eta: 1:09:19  time: 1.0947  data_time: 0.8297  memory: 7513  loss: 0.0176  decode.loss_ce: 0.0176  decode.acc_seg: 99.3319
2023/05/11 06:33:16 - mmengine - INFO - Epoch(train) [1][300/649]  lr: 1.2209e-04  eta: 1:07:52  time: 1.5394  data_time: 1.2593  memory: 7513  loss: 0.0191  decode.loss_ce: 0.0191  decode.acc_seg: 100.0000
2023/05/11 06:34:24 - mmengine - INFO - Epoch(train) [1][350/649]  lr: 1.2209e-04  eta: 1:06:37  time: 1.2564  data_time: 0.9934  memory: 7513  loss: 0.0076  decode.loss_ce: 0.0076  decode.acc_seg: 100.0000
2023/05/11 06:35:33 - mmengine - INFO - Epoch(train) [1][400/649]  lr: 1.2209e-04  eta: 1:05:31  time: 1.3127  data_time: 1.0425  memory: 7513  loss: 0.0135  decode.loss_ce: 0.0135  decode.acc_seg: 100.0000
2023/05/11 06:36:42 - mmengine - INFO - Epoch(train) [1][450/649]  lr: 1.2209e-04  eta: 1:04:17  time: 1.4198  data_time: 1.1516  memory: 7513  loss: 0.0153  decode.loss_ce: 0.0153  decode.acc_seg: 100.0000
2023/05/11 06:37:49 - mmengine - INFO - Epoch(train) [1][500/649]  lr: 1.2209e-04  eta: 1:03:00  time: 1.2662  data_time: 1.0000  memory: 7513  loss: 0.0077  decode.loss_ce: 0.0077  decode.acc_seg: 100.0000
2023/05/11 06:38:54 - mmengine - INFO - Epoch(train) [1][550/649]  lr: 1.2209e-04  eta: 1:01:28  time: 1.2437  data_time: 0.9741  memory: 7512  loss: 0.0144  decode.loss_ce: 0.0144  decode.acc_seg: 100.0000
2023/05/11 06:40:01 - mmengine - INFO - Epoch(train) [1][600/649]  lr: 1.2209e-04  eta: 1:00:16  time: 1.4480  data_time: 1.1799  memory: 7513  loss: 0.0088  decode.loss_ce: 0.0088  decode.acc_seg: 100.0000
2023/05/11 06:41:14 - mmengine - INFO - Exp name: cgnet_fcn_4xb8-60k_cityscapes-512x1024_20230511_062609
2023/05/11 06:41:15 - mmengine - INFO - Epoch(train) [1][650/649]  lr: 1.2209e-04  eta: 0:59:31  time: 1.2535  data_time: 0.9836  memory: 7513  loss: 0.0057  decode.loss_ce: 0.0057  decode.acc_seg: 100.0000
2023/05/11 06:42:24 - mmengine - INFO - Epoch(train) [1][700/649]  lr: 1.2209e-04  eta: 0:58:22  time: 1.5610  data_time: 1.2812  memory: 7513  loss: 0.0063  decode.loss_ce: 0.0063  decode.acc_seg: 100.0000
2023/05/11 06:43:32 - mmengine - INFO - Epoch(train) [1][750/649]  lr: 1.2209e-04  eta: 0:57:10  time: 1.1180  data_time: 0.8474  memory: 7513  loss: 0.0047  decode.loss_ce: 0.0047  decode.acc_seg: 100.0000
2023/05/11 06:44:39 - mmengine - INFO - Epoch(train) [1][800/649]  lr: 1.2209e-04  eta: 0:55:55  time: 1.3450  data_time: 1.0735  memory: 7513  loss: 0.0053  decode.loss_ce: 0.0053  decode.acc_seg: 100.0000
2023/05/11 06:45:44 - mmengine - INFO - Epoch(train) [1][850/649]  lr: 1.2209e-04  eta: 0:54:38  time: 1.3446  data_time: 1.0733  memory: 7512  loss: 0.0031  decode.loss_ce: 0.0031  decode.acc_seg: 100.0000
2023/05/11 06:46:52 - mmengine - INFO - Epoch(train) [1][900/649]  lr: 1.2209e-04  eta: 0:53:29  time: 1.3286  data_time: 1.0527  memory: 7513  loss: 0.0033  decode.loss_ce: 0.0033  decode.acc_seg: 100.0000
2023/05/11 06:47:56 - mmengine - INFO - Epoch(train) [1][950/649]  lr: 1.2209e-04  eta: 0:52:09  time: 1.3882  data_time: 1.1174  memory: 7513  loss: 0.0028  decode.loss_ce: 0.0028  decode.acc_seg: 100.0000
2023/05/11 06:49:08 - mmengine - INFO - Exp name: cgnet_fcn_4xb8-60k_cityscapes-512x1024_20230511_062609
2023/05/11 06:49:08 - mmengine - INFO - Epoch(train) [1][1000/649]  lr: 1.2209e-04  eta: 0:51:09  time: 1.4394  data_time: 1.1653  memory: 7513  loss: 0.0038  decode.loss_ce: 0.0038  decode.acc_seg: 100.0000
2023/05/11 06:49:08 - mmengine - INFO - Saving checkpoint at 1000 iterations
2023/05/11 06:50:14 - mmengine - INFO - Epoch(train) [1][1050/649]  lr: 1.2209e-04  eta: 0:49:55  time: 1.3258  data_time: 1.0573  memory: 7514  loss: 0.0020  decode.loss_ce: 0.0020  decode.acc_seg: 100.0000
2023/05/11 06:51:17 - mmengine - INFO - Epoch(train) [1][1100/649]  lr: 1.2209e-04  eta: 0:48:38  time: 1.2501  data_time: 0.9818  memory: 7513  loss: 0.0046  decode.loss_ce: 0.0046  decode.acc_seg: 100.0000
2023/05/11 06:52:29 - mmengine - INFO - Epoch(train) [1][1150/649]  lr: 1.2209e-04  eta: 0:47:37  time: 1.5697  data_time: 1.2995  memory: 7513  loss: 0.0031  decode.loss_ce: 0.0031  decode.acc_seg: 100.0000
2023/05/11 06:53:37 - mmengine - INFO - Epoch(train) [1][1200/649]  lr: 1.2209e-04  eta: 0:46:28  time: 1.3527  data_time: 1.0814  memory: 7512  loss: 0.0026  decode.loss_ce: 0.0026  decode.acc_seg: 100.0000
2023/05/11 06:54:46 - mmengine - INFO - Epoch(train) [1][1250/649]  lr: 1.2209e-04  eta: 0:45:22  time: 1.4036  data_time: 1.1346  memory: 7520  loss: 0.0021  decode.loss_ce: 0.0021  decode.acc_seg: 100.0000
2023/05/11 06:55:57 - mmengine - INFO - Epoch(train) [1][1300/649]  lr: 1.2209e-04  eta: 0:44:16  time: 1.2517  data_time: 0.9859  memory: 7513  loss: 0.0026  decode.loss_ce: 0.0026  decode.acc_seg: 100.0000
2023/05/11 06:57:08 - mmengine - INFO - Epoch(train) [1][1350/649]  lr: 1.2209e-04  eta: 0:43:13  time: 1.7671  data_time: 1.4853  memory: 7513  loss: 0.0020  decode.loss_ce: 0.0020  decode.acc_seg: 100.0000
2023/05/11 06:58:17 - mmengine - INFO - Epoch(train) [1][1400/649]  lr: 1.2209e-04  eta: 0:42:04  time: 1.3956  data_time: 1.1199  memory: 7513  loss: 0.0018  decode.loss_ce: 0.0018  decode.acc_seg: 100.0000
2023/05/11 06:59:21 - mmengine - INFO - Epoch(train) [1][1450/649]  lr: 1.2209e-04  eta: 0:40:51  time: 1.0310  data_time: 0.7699  memory: 7513  loss: 0.0018  decode.loss_ce: 0.0018  decode.acc_seg: 100.0000
2023/05/11 07:00:24 - mmengine - INFO - Epoch(train) [1][1500/649]  lr: 1.2209e-04  eta: 0:39:37  time: 1.3151  data_time: 1.0460  memory: 7513  loss: 0.0012  decode.loss_ce: 0.0012  decode.acc_seg: 100.0000
2023/05/11 07:01:31 - mmengine - INFO - Epoch(train) [1][1550/649]  lr: 1.2209e-04  eta: 0:38:27  time: 1.3489  data_time: 1.0747  memory: 7513  loss: 0.0018  decode.loss_ce: 0.0018  decode.acc_seg: 100.0000
2023/05/11 07:02:48 - mmengine - INFO - Epoch(train) [1][1600/649]  lr: 1.2209e-04  eta: 0:37:28  time: 1.7174  data_time: 1.4442  memory: 7513  loss: 0.0015  decode.loss_ce: 0.0015  decode.acc_seg: 100.0000
2023/05/11 07:03:53 - mmengine - INFO - Epoch(train) [1][1650/649]  lr: 1.2209e-04  eta: 0:36:17  time: 1.2553  data_time: 0.9937  memory: 7513  loss: 0.0009  decode.loss_ce: 0.0009  decode.acc_seg: 100.0000
2023/05/11 07:04:53 - mmengine - INFO - Epoch(train) [1][1700/649]  lr: 1.2209e-04  eta: 0:35:01  time: 1.0762  data_time: 0.8100  memory: 7513  loss: 0.0018  decode.loss_ce: 0.0018  decode.acc_seg: 100.0000
2023/05/11 07:06:05 - mmengine - INFO - Epoch(train) [1][1750/649]  lr: 1.2209e-04  eta: 0:33:56  time: 1.3750  data_time: 1.0990  memory: 7513  loss: 0.0016  decode.loss_ce: 0.0016  decode.acc_seg: 100.0000
2023/05/11 07:07:18 - mmengine - INFO - Epoch(train) [1][1800/649]  lr: 1.2209e-04  eta: 0:32:52  time: 1.5025  data_time: 1.2246  memory: 7513  loss: 0.0014  decode.loss_ce: 0.0014  decode.acc_seg: 100.0000
2023/05/11 07:08:20 - mmengine - INFO - Epoch(train) [1][1850/649]  lr: 1.2209e-04  eta: 0:31:39  time: 1.3757  data_time: 1.1131  memory: 7513  loss: 0.0010  decode.loss_ce: 0.0010  decode.acc_seg: 100.0000
2023/05/11 07:09:26 - mmengine - INFO - Epoch(train) [1][1900/649]  lr: 1.2209e-04  eta: 0:30:29  time: 1.3357  data_time: 1.0629  memory: 7513  loss: 0.0010  decode.loss_ce: 0.0010  decode.acc_seg: 100.0000
2023/05/11 07:10:35 - mmengine - INFO - Epoch(train) [1][1950/649]  lr: 1.2209e-04  eta: 0:29:22  time: 1.4058  data_time: 1.1387  memory: 7513  loss: 0.0011  decode.loss_ce: 0.0011  decode.acc_seg: 100.0000
2023/05/11 07:11:46 - mmengine - INFO - Exp name: cgnet_fcn_4xb8-60k_cityscapes-512x1024_20230511_062609
2023/05/11 07:11:46 - mmengine - INFO - Epoch(train) [1][2000/649]  lr: 1.2209e-04  eta: 0:28:16  time: 1.3080  data_time: 1.0387  memory: 7513  loss: 0.0011  decode.loss_ce: 0.0011  decode.acc_seg: 100.0000
2023/05/11 07:11:46 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/05/11 07:12:52 - mmengine - INFO - Epoch(train) [1][2050/649]  lr: 1.2209e-04  eta: 0:27:06  time: 1.2308  data_time: 0.9685  memory: 7513  loss: 0.0025  decode.loss_ce: 0.0025  decode.acc_seg: 100.0000
2023/05/11 07:13:58 - mmengine - INFO - Epoch(train) [1][2100/649]  lr: 1.2209e-04  eta: 0:25:58  time: 1.4160  data_time: 1.1440  memory: 7513  loss: 0.0013  decode.loss_ce: 0.0013  decode.acc_seg: 100.0000
2023/05/11 07:15:00 - mmengine - INFO - Epoch(train) [1][2150/649]  lr: 1.2209e-04  eta: 0:24:46  time: 1.1130  data_time: 0.8462  memory: 7514  loss: 0.0010  decode.loss_ce: 0.0010  decode.acc_seg: 100.0000
2023/05/11 07:16:15 - mmengine - INFO - Epoch(train) [1][2200/649]  lr: 1.2209e-04  eta: 0:23:42  time: 1.5557  data_time: 1.2838  memory: 7513  loss: 0.0010  decode.loss_ce: 0.0010  decode.acc_seg: 100.0000
2023/05/11 07:17:27 - mmengine - INFO - Epoch(train) [1][2250/649]  lr: 1.2209e-04  eta: 0:22:35  time: 1.3187  data_time: 1.0541  memory: 7513  loss: 0.0008  decode.loss_ce: 0.0008  decode.acc_seg: 100.0000
2023/05/11 07:18:31 - mmengine - INFO - Epoch(train) [1][2300/649]  lr: 1.2209e-04  eta: 0:21:26  time: 1.4340  data_time: 1.1622  memory: 7513  loss: 0.0009  decode.loss_ce: 0.0009  decode.acc_seg: 100.0000
2023/05/11 07:19:37 - mmengine - INFO - Epoch(train) [1][2350/649]  lr: 1.2209e-04  eta: 0:20:17  time: 1.3078  data_time: 1.0466  memory: 7513  loss: 0.0009  decode.loss_ce: 0.0009  decode.acc_seg: 100.0000
